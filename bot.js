const Discord = require('discord.js');
const client = new Discord.Client();
const prefix = '.'


client.on('ready', () => {
  console.log(`Logged in as ${client.user.tag}!`);
client.user.setGame(`Test`,"http://twitch.tv/S-F")
  console.log('')
  console.log('')
  console.log('‚ïî[‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê]‚ïó')
  console.log(`[Start] ${new Date()}`);
  console.log('‚ïö[‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê]‚ïù')
  console.log('')
  console.log('‚ïî[‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê]‚ïó');
  console.log(`Logged in as * [ " ${client.user.username} " ]`);
  console.log('')
  console.log('Informations :')
  console.log('')
  console.log(`servers! [ " ${client.guilds.size} " ]`);
  console.log(`Users! [ " ${client.users.size} " ]`);
  console.log(`channels! [ " ${client.channels.size} " ]`);
  console.log('‚ïö[‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê]‚ïù')
  console.log('')
  console.log('‚ïî[‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê]‚ïó')
  console.log(' Bot Is Online')
  console.log('‚ïö[‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê]‚ïù')
  console.log('')
  console.log('')
});












client.on('message', message => {
    if (message.content.startsWith("ÿ±ÿßÿ®ÿ∑")) {

  message.channel.createInvite({
        thing: true,
        maxUses: 10,
        maxAge: 86400
    }).then(invite =>
      message.author.sendMessage(invite.url)
    )
  message.channel.send("**ÿ™ŸÖ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿ®ÿ±ÿ≥ÿßŸÑÿ© ÿÆÿßÿµÿ©**")

message.author.send(`**ŸÖÿØÿ© ÿßŸÑÿ±ÿßÿ®ÿ∑ : ŸäŸÄŸàŸÖ
ÿπÿØÿØ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖÿßÿ™ ÿßŸÑÿ±ÿßÿ®ÿ∑ : 2**`)


    }
});








client.on('message', message => {
  if (message.guild) {
 let embed = new Discord.RichEmbed()
  let args = message.content.split(' ').slice(1).join(' ');
if(message.content.split(' ')[0] == prefix + 'bc') {
  if (!args[1]) {
message.channel.send("**+bc <message>**");
return;
}
      message.guild.members.forEach(m => {
 if(!message.member.hasPermission('ADMINISTRATOR')) return;
          var bc = new Discord.RichEmbed()
          .setAuthor(message.author.username, message.author.avatarURL)
          .addField(' The server', `${message.guild.name}`, true)
          .addField(' who sended the messege ', `${message.author.username}!${message.author.discriminator}`, true)
          .addField(' the messege ', args)
          .setThumbnail(message.guild.iconURL)
          .setColor('RANDOM')
          m.send(`${m}`,{embed: bc});
      });
      const unknown = new Discord.RichEmbed()
      .setAuthor(message.author.username, message.author.avatarURL)
      .setTitle('‚úÖ| the messege is loading ')
      .addBlankField(true)
      .addField('‚ô®| i got sended to  ', message.guild.memberCount , true)
      .addField('üìù| the message ', args)
      .setColor('RANDOM')
      message.channel.sendEmbed(embed);
  }
  } else {
      return;
  }
});





client.on('message', message => {
    if(message.content.includes('discord.gg')){
                                            if(!message.channel.guild) return message.reply('** advertising me on DM ? ü§î   **');
        if (!message.member.hasPermissions(['ADMINISTRATOR'])){
        message.delete()
    return message.reply(`** No Invite Links :angry: !**`)
    }
}
});










 client.on('message', message => {
if(message.content == '<@507621570420801537>') {
message.channel.startTyping()
setTimeout(() => {
message.channel.stopTyping()
}, 7000);
}
});






client.on('message', message => {
    if(message.content.startsWith(prefix + 'new')) {
        let args = message.content.split(' ').slice(1).join(' ');
        let support = message.guild.roles.find("name","Support Team");
        let ticketsStation = message.guild.channels.find("name", "TICKETS");
        if(!args) {
            return message.channel.send('Please type a subject for the ticket.');
        };
                if(!support) {
                    return message.channel.send('**Please make sure that `Support Team` role exists and it\'s not duplicated.**');
                };
            if(!ticketsStation) {
                message.guild.createChannel("TICKETS", "category");
            };
                message.guild.createChannel(`ticket-${message.author.username}`, "text").then(ticket => {
                    message.delete()
                        message.channel.send(`Your ticket has been created. [ ${ticket} ]`);
                    ticket.setParent(ticketsStation);
                    ticketsStation.setPosition(1);
                        ticket.overwritePermissions(message.guild.id, {
                            SEND_MESSAGES: false,
                            READ_MESSAGES: false
                        });
                            ticket.overwritePermissions(support.id, {
                                SEND_MESSAGES: false,
                                READ_MESSAGES: false
                            });
                                ticket.overwritePermissions(message.author.id, {
                                    SEND_MESSAGES: false,
                                    READ_MESSAGES: false
                                });
                    let embed = new Discord.RichEmbed()
                                .setTitle('**New Ticket.**')
                                .setColor("RANDOM")
                                .setThumbnail(`${message.author.avatarURL}`)
                                .addField('Subject', args)
                                .addField('Author', message.author)
                                .addField('Channel', `<#${message.channel.id}>`);
 
                                ticket.sendEmbed(embed);
                }) .catch();
    }
    if(message.content.startsWith(prefix + 'close')) {
            if(!message.member.hasPermission("ADMINISTRATOR")) return;
        if(!message.channel.name.startsWith("ticket")) {
            return;
        };  
                let embed = new Discord.RichEmbed()
                    .setAuthor("Do you really want to close this ticket? Repeat the command to make sure. You have 20 seconds.")
                    .setColor("RANDOM");
                    message.channel.sendEmbed(embed) .then(codes => {
 
                   
                        const filter = msg => msg.content.startsWith(prefix + 'close');
                        message.channel.awaitMessages(response => response.content === prefix + 'close', {
                            max: 1,
                            time: 20000,
                            errors: ['time']
                        })
                        .then((collect) => {
                            message.channel.delete();
                        }) .catch(() => {
                            codes.delete()
                                .then(message.channel.send('**Operation has been cancelled.**')) .then((c) => {
                                    c.delete(4000);
                                })
                                   
                           
                        })
 
 
                    })
 
 
           
    }
});
 
 
 





 
 
client.on('message', message => {      
if (message.content.startsWith('+clear')) { //xRGRx .. By Julian
    if(!message.channel.guild) return message.reply('‚õî | This Command For Servers Only!');
        if(!message.member.hasPermission('MANAGE_MESSAGES')) return message.channel.send('‚õî | You dont have **MANAGE_MESSAGES** Permission!');
        if(!message.guild.member(client.user).hasPermission('MANAGE_MESSAGES')) return message.channel.send('‚õî | I dont have **MANAGE_MESSAGES** Permission!');
 let args = message.content.split(" ").slice(1)
    let messagecount = parseInt(args);
    if (args > 99) return message.reply("**üõë || Ÿäÿ¨ÿ® ÿßŸÜ ŸäŸÉŸàŸÜ ÿπÿØÿØ ÿßŸÑŸÖÿ≥ÿ≠ ÿ£ŸÇŸÑ ŸÖŸÜ 100 .**").then(messages => messages.delete(5000))
    if(!messagecount) args = '100';
    message.channel.fetchMessages({limit: messagecount + 1}).then(messages => message.channel.bulkDelete(messages));
    message.channel.send(`\`${args}\` : __ÿπÿØÿØ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ™Ÿä ÿ™ŸÖ ŸÖÿ≥ÿ≠Ÿáÿß __ `).then(messages => messages.delete(5000));
  }
  });







client.on('message', message => {
    if(message.content === "+info") {
        const embed = new Discord.RichEmbed()
        .setColor("RED")
  .addField('**ÿßŸÑÿ∞ÿßŸÉÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ© üíæ**', `${(process.memoryUsage().rss / 1000000).toFixed()}MB`, true)
         .addField('**ÿ≥ÿ±ÿπÿ© ÿßŸÑÿßÿ™ÿµÿßŸÑüì°**' , `${Date.now() - message.createdTimestamp}` + ' ms') /// By KIllerFox
        .addField('**ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÖÿπÿßŸÑÿ¨üíø**', `${(process.cpuUsage().rss / 10000).toFixed()}%`, true)
        .addField('**üåê ÿπÿØÿØ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±ÿßÿ™**' , `${client.guilds.size}`, true)
        .addField('**ÿπÿØÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ üë• **' , `${client.users.size}`, true)
               message.channel.sendEmbed(embed); /// By KIllerFox
           }
});







 client.on('message', message => {
    if (message.content.startsWith("+avatar")) {
if(!message.channel.guild) return;
        var mentionned = message.mentions.users.first();
    var client;
      if(mentionned){
          var client = mentionned; } else {
          var client = message.author;
      }
        const embed = new Discord.RichEmbed()
                           .addField('Requested by:', "<@" + message.author.id + ">")
        .setColor(000000)
        .setImage(`${client.avatarURL}`)
      message.channel.sendEmbed(embed);
    }
});








client.on('guildMemberAdd', member => {
    let channel = member.guild.channels.find('name', '‚∏®ñ§êŸÖÿ±ÿ≠ÿ®ÿßñ§ê‚∏©');
    let memberavatar = member.user.avatarURL
      if (!channel) return;
    let embed = new Discord.RichEmbed()
        .setColor('RANDOM')
        .setThumbnail(memberavatar)
        .addField('‚Ä¢üî∞|Name¬ª ÿßŸÑÿ•ÿ≥ŸÖ',`${member}`)
        .addField('‚Ä¢üåπ|Welcome ¬ª ŸÜŸàÿ±ÿ™ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±' , `Welcome to the server, ${member}`)
        .addField('‚Ä¢üÜî| User ¬ª ÿßŸä ÿØŸä ÿßŸÑÿπÿ∂Ÿà', "**[" + `${member.id}` + "]**" )
                .addField('‚û°| ÿßŸÜÿ™ ÿßŸÑÿπÿ∂Ÿà ÿ±ŸÇŸÖ',`${member.guild.memberCount}`)                    
                                     .addField('‚Ä¢üîÆ|Server Name ¬ª ÿßÿ≥ŸÖ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±', `${member.guild.name}`,true)
    .addField('‚Ä¢üï£|Time Create ¬ª ŸÖÿØÿ© ÿßŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®ŸÉ', member.user.createdAt.toLocaleString(), true)
 
                                       
     .setFooter("LegendGang")
        .setTimestamp()
   
      channel.sendEmbed(embed);
    });






client.on('message', emoko => {
  if (emoko.content === "+date") {
         if (!emoko.channel.guild) return emoko.reply('** This command only for servers **');  
         var currentTime = new Date(),
            hours = currentTime.getHours() + 4 ,
            hours2 = currentTime.getHours() + 3 ,
            hours3 = currentTime.getHours() + 2 ,
            hours4 = currentTime.getHours() + 3 ,
            minutes = currentTime.getMinutes(),
            seconds = currentTime.getSeconds(),
            Year = currentTime.getFullYear(),
            Month = currentTime.getMonth() + 1,
            Day = currentTime.getDate();
             var h = hours
  if(hours > 12) {
               hours -= 12;
            } else if(hours == 0) {
                hours = "12";
            }  
             if(hours2 > 12) {
               hours2 -= 12;
            } else if(hours2 == 0) {
                hours2 = "12";
           
            }  
if(hours3 > 12) {
               hours3 -= 12;
            } else if(hours3 == 0) {
                hours3 = "12";
            }
            if (minutes < 10) {
                minutes = '0' + minutes;
            }
 
 
            var suffix = 'ÿµÿ®ÿßÿ≠ÿßŸé';
            if (hours >= 12) {
                suffix = 'ŸÖÿ≥ÿßÿ°';
                hours = hours - 12;
            }
            if (hours == 0) {
                hours = 12;
            }
 
 
const embed = new Discord.RichEmbed()
                .setThumbnail("https://i.imgur.com/ib3n4Hq.png")
                .setTitle( "„ÄéÿßŸÑÿ™ÿßÿ±ŸäÿÆ  ŸàÿßŸÑŸàŸÇÿ™„Äè")
                .setColor('RANDOM')
                .setFooter(emoko.author.username, emoko.author.avatarURL)
                .addField('ÿßŸÑÿßŸÖÿßÿ±ÿßÿ™',
                "„Äé"+ hours + ":" + minutes +":"+ seconds + "„Äè")
                 .addField('ŸÖŸÉŸá ÿßŸÑŸÖŸÉÿ±ŸÖŸá',
                "„Äé"+ hours2 + ":" + minutes +":"+ seconds  + "„Äè")
                .addField('ŸÖÿµÿ±',
                "„Äé"+ hours3 + ":" + minutes +":"+ seconds  + "„Äè")
               
                .addField('Date',
                "„Äé"+ Day + "-" + Month + "-" + Year +  "„Äè")
 
 
  emoko.channel.sendEmbed(embed);
   }
});
 
 
  


client.on('message', message => {
        var prefix = "+";
        if(message.content.startsWith(prefix + 'deafen')) {
      if (message.mentions.users.size === 0 && message.mentions.roles.size === 0) {
        return message.reply('**Ÿäÿ¨ÿ® ÿπŸÑŸäŸÉ ÿßŸÑŸÖŸÜÿ¥ŸÜ ÿßŸàŸÑÿßŸë**‚ùå').catch(console.error);
      }
      if (!message.guild.member(client.user).hasPermission('DEAFEN_MEMBERS')) {
        return message.reply('ŸÑŸÑÿ£ÿ≥ŸÅ ÿßŸÑÿ®Ÿàÿ™ ŸÑÿß ŸäŸÖÿ™ŸÑŸÉ ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ŸÑÿ™ŸÜŸÅŸäÿ∞ Ÿáÿ∞Ÿá ÿßŸÑÿ£ŸÖÿ±**‚ùå').catch(console.error);
      }
     
      const deafenMember = (member) => {
        if (!member || !member.voiceChannel) return;
        if (member.serverDeaf) return message.channel.send(`${member} **ŸÑÿØŸäŸá ÿØŸäŸÅŸÜ ÿ®ÿßŸÑŸÅÿπŸÑ**:x:`);
        member.setDeaf(true).catch(console.error);
        if(!message.member.hasPermission("DEAFEN_MEMBERS")) return message.channel.sendMessage("**ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿ© ŸÑÿßÿπÿ∑ÿßÿ° ÿØŸäŸÅŸÜ **‚ùå ").then(m => m.delete(5000));
      };
     
      message.mentions.users.forEach(user => deafenMember(message.guild.member(user)));
      message.mentions.roles.forEach(role => role.members.forEach(member => deafenMember(member)));
        }
       
    });
   








client.on('message', async message =>{
      var prefix = "+";
      if(message.content.startsWith(prefix + 'undeafen')) {
     
    if (message.mentions.users.size === 0 && message.mentions.roles.size === 0) {
      return message.reply('**Ÿäÿ¨ÿ® ÿπŸÑŸäŸÉ ÿßŸÑŸÖŸÜÿ¥ŸÜ ÿßŸàŸÑÿßŸë**‚ùå').catch(console.error);
    }
    if (!message.guild.member(client.user).hasPermission('DEAFEN_MEMBERS')) {
      return message.reply('**ŸÑŸÑÿ£ÿ≥ŸÅ ÿßŸÑÿ®Ÿàÿ™ ŸÑÿß ŸäŸÖÿ™ŸÑŸÉ ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ŸÑÿ™ŸÜŸÅŸäÿ∞ Ÿáÿ∞Ÿá ÿßŸÑÿ£ŸÖÿ±**‚ùå ').catch(console.error);
      if(!message.member.hasPermission("DEAFEN_MEMBERS")) return message.channel.sendMessage("**ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿ© ŸÑÿßÿπÿ∑ÿßÿ° ÿØŸäŸÅŸÜ **‚ùå ").then(m => m.delete(5000));
    }
     
    const undeafenMember = (member) => {
      if (!member || !member.voiceChannel) return;
      if (!member.serverDeaf) return message.channel.send(`${member} `);
      member.setDeaf(false).catch(console.error);
    };
     
    message.mentions.users.forEach(user => undeafenMember(message.guild.member(user)));
    message.mentions.roles.forEach(role => role.members.forEach(member => undeafenMember(member)));
    }
    });



  var prefix = "+";
      if(message.content.startsWith(prefix + 'unmutevoice')) {
        if(!message.member.hasPermission("MUTE_MEMBERS")) return message.channel.sendMessage("**ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿ© ŸÑÿßÿπÿ∑ÿßÿ° ŸÖŸäŸàÿ™ ÿµŸàÿ™Ÿä**‚ùå ").then(m => m.delete(5000));
        if(!message.guild.member(client.user).hasPermission("MUTE_MEMBERS")) return message.reply("**I Don't Have `MUTE_MEMBERS` Permission**").then(msg => msg.delete(6000))
         
      if(message.mentions.users.size === 0) {
        return message.reply("Please mention a user to mute.");
      }
      let muteMember = message.guild.member(message.mentions.users.first());
      if(!muteMember) {
        return message.reply("Try again.");
      }
      muteMember.setMute(false);
      if(muteMember) {
        message.channel.sendMessage("User muted successfully.");
      }
    }
  });







    client.on('message', message => {
        var prefix = "+";
        if(message.content.startsWith(prefix + 'mutevoice')) {
          if(!message.member.hasPermission("MUTE_MEMBERS")) return message.channel.sendMessage("**ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿ© ŸÑÿßÿπÿ∑ÿßÿ° ŸÖŸäŸàÿ™ ÿµŸàÿ™Ÿä**‚ùå ").then(m => m.delete(5000));
          if(!message.guild.member(client.user).hasPermission("MUTE_MEMBERS")) return message.reply("**I Don't Have `MUTE_MEMBERS` Permission**").then(msg => msg.delete(6000))
           
        if(message.mentions.users.size === 0) {
          return message.reply("Please mention a user to mute.");
        }
        let muteMember = message.guild.member(message.mentions.users.first());
        if(!muteMember) {
          return message.reply("Try again.");
        }
        muteMember.setMute(true);
        if(muteMember) {
          message.channel.sendMessage("User muted successfully.");
        }
      }
    });






    client.on('message', message => {
        var prefix = "+";
        if(message.content.startsWith(prefix + 'mutevoice')) {
          if(!message.member.hasPermission("MUTE_MEMBERS")) return message.channel.sendMessage("**ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿ© ŸÑÿßÿπÿ∑ÿßÿ° ŸÖŸäŸàÿ™ ÿµŸàÿ™Ÿä**‚ùå ").then(m => m.delete(5000));
          if(!message.guild.member(client.user).hasPermission("MUTE_MEMBERS")) return message.reply("**I Don't Have `MUTE_MEMBERS` Permission**").then(msg => msg.delete(6000))
           
        if(message.mentions.users.size === 0) {
          return message.reply("Please mention a user to mute.");
        }
        let muteMember = message.guild.member(message.mentions.users.first());
        if(!muteMember) {
          return message.reply("Try again.");
        }
        muteMember.setMute(true);
        if(muteMember) {
          message.channel.sendMessage("User muted successfully.");
        }
      }
    });





 client.on('message', message => {
    var args = message.content.split(/[ ]+/)
    if(message.content.includes('ÿßŸÖŸÉ')){
        message.delete()
      message.channel.sendMessage("", {embed: {
        title: "ŸÑÿß ÿ™ÿ≥ÿ®",
        color: 0x06DF00,
        description: "ŸÖŸéŸëÿß ŸäŸéŸÑŸíŸÅŸêÿ∏Ÿè ŸÖŸêŸÜ ŸÇŸéŸàŸíŸÑŸç ÿ•ŸêŸÑŸéŸëÿß ŸÑŸéÿØŸéŸäŸíŸáŸê ÿ±ŸéŸÇŸêŸäÿ®Ÿå ÿπŸéÿ™ŸêŸäÿØŸå ",
        footer: {
          text: "By Abo Khalil"
        }
      }}).then(msg => {msg.delete(4000)});
                          }
 
     
});
 
 
 
 
    client.on('message', message => {
    var args = message.content.split(/[ ]+/)
    if(message.content.includes('ÿπÿ±ÿµ')){
        message.delete()
      message.channel.sendMessage("", {embed: {
        title: "ŸÑÿß ÿ™ÿ≥ÿ®",
        color: 0x06DF00,
        description: "ŸÖŸéŸëÿß ŸäŸéŸÑŸíŸÅŸêÿ∏Ÿè ŸÖŸêŸÜ ŸÇŸéŸàŸíŸÑŸç ÿ•ŸêŸÑŸéŸëÿß ŸÑŸéÿØŸéŸäŸíŸáŸê ÿ±ŸéŸÇŸêŸäÿ®Ÿå ÿπŸéÿ™ŸêŸäÿØŸå ",
        footer: {
          text: "By Abo Khalil"
        }
      }}).then(msg => {msg.delete(4000)});
                          }
 
     
});
 
 
 
 
    client.on('message', message => {
    var args = message.content.split(/[ ]+/)
    if(message.content.includes('ÿÆŸàŸÑ')){
        message.delete()
      message.channel.sendMessage("", {embed: {
        title: "ŸÑÿß ÿ™ÿ≥ÿ®",
        color: 0x06DF00,
        description: "ŸÖŸéŸëÿß ŸäŸéŸÑŸíŸÅŸêÿ∏Ÿè ŸÖŸêŸÜ ŸÇŸéŸàŸíŸÑŸç ÿ•ŸêŸÑŸéŸëÿß ŸÑŸéÿØŸéŸäŸíŸáŸê ÿ±ŸéŸÇŸêŸäÿ®Ÿå ÿπŸéÿ™ŸêŸäÿØŸå ",
        footer: {
          text: "By Abo Khalil"
        }
      }}).then(msg => {msg.delete(4000)});
                          }
 
     
});
 
 
 
 
    client.on('message', message => {
    var args = message.content.split(/[ ]+/)
    if(message.content.includes('ÿ¥ÿ±ŸÖŸàÿ∑')){
        message.delete()
      message.channel.sendMessage("", {embed: {
        title: "ŸÑÿß ÿ™ÿ≥ÿ®",
        color: 0x06DF00,
        description: "ŸÖŸéŸëÿß ŸäŸéŸÑŸíŸÅŸêÿ∏Ÿè ŸÖŸêŸÜ ŸÇŸéŸàŸíŸÑŸç ÿ•ŸêŸÑŸéŸëÿß ŸÑŸéÿØŸéŸäŸíŸáŸê ÿ±ŸéŸÇŸêŸäÿ®Ÿå ÿπŸéÿ™ŸêŸäÿØŸå ",
        footer: {
          text: "By Abo Khalil"
        }
      }}).then(msg => {msg.delete(4000)});
                          }
 
     
});
 
 
 
 
    client.on('message', message => {
    var args = message.content.split(/[ ]+/)
    if(message.content.includes('ŸÖÿ™ŸÜŸÉ')){
        message.delete()
      message.channel.sendMessage("", {embed: {
        title: "ŸÑÿß ÿ™ÿ≥ÿ®",
        color: 0x06DF00,
        description: "ŸÖŸéŸëÿß ŸäŸéŸÑŸíŸÅŸêÿ∏Ÿè ŸÖŸêŸÜ ŸÇŸéŸàŸíŸÑŸç ÿ•ŸêŸÑŸéŸëÿß ŸÑŸéÿØŸéŸäŸíŸáŸê ÿ±ŸéŸÇŸêŸäÿ®Ÿå ÿπŸéÿ™ŸêŸäÿØŸå ",
        footer: {
          text: "By Abo Khalil"
        }
      }}).then(msg => {msg.delete(4000)});
                          }
 
     
});





client.on('message' , najzx => {
    var prefix = "+";
    let user = najzx.mentions.users.first()|| client.users.get(najzx.content.split(' ')[1])
    if(najzx.content.startsWith(prefix + 'unban')) {
        if(!najzx.member.hasPermission('ADMINISTRATOR')) return najzx.channel.send('‚ùå|**\`ADMINISTRATOR\`ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÑÿØŸäŸÉ ÿ±ÿ™ÿ®ÿ©`**');
        if(!user) return  najzx.channel.send(`Do this ${prefix} <@ID user> \n or \n ${prefix}unban ID user`);
        najzx.guild.unban(user);
        najzx.guild.owner.send(`ŸÑŸÇÿØ ÿ™ŸÖ ŸÅŸÉ ÿßŸÑÿ®ÿßŸÜÿØ ÿπŸÜ ÿßŸÑÿ¥ÿÆÿµ \n ${user} \n By : <@${najzx.author.id}>`)
        var embed = new Discord.RichEmbed()
        .setThumbnail(najzx.author.avatarURl)
        .setColor("RANDOM")
        .setTitle('**Unban** !')
        .addField('**User Unban :** ', `${user}` , true)
        .addField('**By :**' ,       ` <@${najzx.author.id}> ` , true)
        .setAuthor(najzx.guild.name)
       .setFooter('Requested by '+najzx.author.username, najzx.author.avatarURL)
        najzx.channel.sendEmbed(embed)
    }
  });






client.on('message', function(msg) {
    const prefix = '+'
    if(msg.content.startsWith ('+server')) {
      let embed = new Discord.RichEmbed()
      .setColor('RANDOM')
      .setThumbnail(msg.guild.iconURL)
      .setTitle(`Showing Details Of  **${msg.guild.name}*`)
      .addField('üåê** server type**',`[** __${msg.guild.region}__ **]`,true)
      .addField('üèÖ** __Roles__**',`[** __${msg.guild.roles.size}__ **]`,true)
      .addField('üî¥**__ Members Number__**',`[** __${msg.guild.memberCount}__ **]`,true)
      .addField('üîµ**__ Members Number who online__**',`[** __${msg.guild.members.filter(m=>m.presence.status == 'online').size}__ **]`,true)
      .addField('üìù**__ Text Channels__**',`[** __${msg.guild.channels.filter(m => m.type === 'text').size}__** ]`,true)
      .addField('üé§**__ voice Channels__**',`[** __${msg.guild.channels.filter(m => m.type === 'voice').size}__ **]`,true)
      .addField('üëë**__ The Owner__**',`**${msg.guild.owner}**`,true)
      .addField('üÜî**__ Server ID__**',`**${msg.guild.id}**`,true)
      .addField('üìÖ**__The date when the server created __**',msg.guild.createdAt.toLocaleString())
      msg.channel.send({embed:embed});
    }
  });






client.on('message', message => {
    if (message.content.startsWith("+bans")) {
        message.guild.fetchBans()
        .then(bans => message.channel.send(`${bans.size} ÿπÿØÿØ ÿßÿ¥ÿÆÿßÿµ ÿßŸÑŸÖÿ®ŸÜÿØÿ© ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± `))
  .catch(console.error);
}
});




 client.on('message', message => {
var prefix = "+";
       if(message.content === prefix + "mutechat") {
                           if(!message.channel.guild) return message.reply('** This command only for servers**');
 
   if(!message.member.hasPermission('MANAGE_MESSAGES')) return message.reply(' **__ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿßÿ™__**');
              message.channel.overwritePermissions(message.guild.id, {
            SEND_MESSAGES: false
 
              }).then(() => {
                  message.reply("**__ÿ™ŸÖ ÿ™ŸÇŸÅŸäŸÑ ÿßŸÑÿ¥ÿßÿ™__ ‚úÖ **")
              });
                }
//FIRE BOT
    if(message.content === prefix + "unchat") {
                        if(!message.channel.guild) return message.reply('** This command only for servers**');
 
   if(!message.member.hasPermission('MANAGE_MESSAGES')) return message.reply('**__ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿµŸÑÿßÿ≠Ÿäÿßÿ™__**');
              message.channel.overwritePermissions(message.guild.id, {
            SEND_MESSAGES: true
 
              }).then(() => {
                  message.reply("**__ÿ™ŸÖ ŸÅÿ™ÿ≠ ÿßŸÑÿ¥ÿßÿ™__‚úÖ**")
              });
    }
       
});







client.on('guildMemberAdd', member => {
    const botCount = member.guild.members.filter(m=>m.user.bot).size
    const memberCount = [member.guild.memberCount] - [botCount]
    client.channels.get('508612532559413258').setName(`‚ü´„Äé ${memberCount} ÿπÿØÿØ ÿßŸÑÿßÿπÿ∂ÿßÿ° „Äè‚ü™`);
    client.channels.get('508612678764462090').setName(`‚ü´„Äé ${botCount} ÿπÿØÿØ ÿßŸÑÿ®Ÿàÿ™ÿßÿ™ „Äè‚ü™`);
});
 
client.on('guildMemberRemove', member => {
    const botCount = member.guild.members.filter(m=>m.user.bot).size
    const memberCount = [member.guild.memberCount] - [botCount]
    client.channels.get('508612532559413258').setName(`‚ü´„Äé ${memberCount} ÿπÿØÿØ ÿßŸÑÿßÿπÿ∂ÿßÿ° „Äè‚ü™`);
    client.channels.get('508612678764462090').setName(`‚ü´„Äé ${botCount} ÿπÿØÿØ ÿßŸÑÿ®Ÿàÿ™ÿßÿ™ „Äè‚ü™`);
});










 
 client.on('message', message => {
    var prefix = "+"
  if (message.author.x5bz) return;
  if (!message.content.startsWith(prefix)) return;
 
  let command = message.content.split(" ")[0];
  command = command.slice(prefix.length);
 
  let args = message.content.split(" ").slice(1);
 
  if (command == "kick") {
               if(!message.channel.guild) return message.reply('** This command only for servers**');
         
  if(!message.guild.member(message.author).hasPermission("KICK_MEMBERS")) return message.reply("**You Don't Have ` KICK_MEMBERS ` Permission**");
  if(!message.guild.member(client.user).hasPermission("KICK_MEMBERS")) return message.reply("**I Don't Have ` KICK_MEMBERS ` Permission**");
  let user = message.mentions.users.first();
  let reason = message.content.split(" ").slice(2).join(" ");
  if (message.mentions.users.size < 1) return message.reply("**ŸÖŸÜÿ¥ŸÜ ÿ¥ÿÆÿµ**");
  if(!reason) return message.reply ("**ÿßŸÉÿ™ÿ® ÿ≥ÿ®ÿ® ÿßŸÑÿ∑ÿ±ÿØ**");
  if (!message.guild.member(user)
  .kickable) return message.reply("**ŸÑÿßŸäŸÖŸÉŸÜŸÜŸä ÿ∑ÿ±ÿØ ÿ¥ÿÆÿµ ÿßÿπŸÑŸâ ŸÖŸÜ ÿ±ÿ™ÿ®ÿ™Ÿä Ÿäÿ±ÿ¨Ÿá ÿßÿπÿ∑ÿßÿ° ÿßŸÑÿ®Ÿàÿ™ ÿ±ÿ™ÿ®Ÿá ÿπÿßŸÑŸä**");
 
  message.guild.member(user).kick();
 
  const kickembed = new Discord.RichEmbed()
  .setAuthor(`KICKED!`, user.displayAvatarURL)
  .setColor("RANDOM")
  .setTimestamp()
  .addField("**User:**",  '**[ ' + `${user.tag}` + ' ]**')
  .addField("**By:**", '**[ ' + `${message.author.tag}` + ' ]**')
  .addField("**Reason:**", '**[ ' + `${reason}` + ' ]**')
  message.channel.send({
    embed : kickembed
  })
}
});
 





let points = JSON.parse(fs.readFileSync('points.json', 'utf8'));
client.on('message', message => {
    if (!points[message.author.id]) points[message.author.id] = {points : 0}
    if (message.content == '+ŸÜŸÇÿßÿ∑Ÿä'){
        var embed = new Discord.RichEmbed()
        .setAuthor(message.author.username,message.author.avatarURL)
        .addField(`ŸÜŸÇÿßÿ∑ŸÉ : ${points[message.author.id].points}`,'SYTRA',   true)
        .setColor('RANDOM')
        .setFooter('ÿßŸÑÿπÿßÿ® Ÿàÿ®ÿ≥', client.user.avatarURL);
        message.channel.sendEmbed(embed)
    };
    if (message.content == "+ŸÅŸÉŸÉ") {    
        var x = ['ÿ∂ŸÅÿØÿπ', 'ÿ∑Ÿäÿßÿ±ÿ©', 'ÿ±ÿπŸàÿØŸä', 'ÿ™ŸÅŸÉŸäŸÉ', 'ÿ™ÿ¨ÿ±ÿ®ÿ©', 'ŸÖÿØÿ±ÿ≥ÿ©', 'ŸÖÿπŸÑŸÖ' , 'ŸÜŸÇÿßÿ∑' , 'ÿßŸÉÿ≥ŸäŸÅŸà' , 'ŸÖŸÉŸàŸá' , 'ŸáŸÉŸàŸÜÿß ŸÖÿ∑ÿßÿ∑ÿß' , 'ÿßŸÉÿ≥ŸäŸÅŸà ÿ∞ÿß ÿ®Ÿäÿ≥ÿ™'];
        var x2 = ['ÿ∂ ŸÅ ÿØ ÿπ', 'ÿ∑ Ÿä ÿß ÿ± ÿ©', 'ÿ± ÿπ Ÿà ÿØ Ÿä', 'ÿ™ ŸÅ ŸÉ Ÿä ŸÉ', 'ÿ™ ÿ¨ ÿ± ÿ® ÿ©', 'ŸÖ ÿØ ÿ± ÿ≥ ÿ©', 'ŸÖ ÿπ ŸÑ ŸÖ', 'ŸÜ ŸÇ ÿß ÿ∑', 'ÿß ŸÉ ÿ≥ Ÿä ŸÅ Ÿà', 'ŸÖ ŸÉ Ÿà Ÿá', 'Ÿá ŸÉ Ÿà ŸÜ ÿß ŸÖ ÿ∑ ÿß ÿ∑ ÿß', 'ÿß ŸÉ ÿ≥ Ÿä ŸÅ Ÿà ÿ∞ ÿß ÿ® Ÿä ÿ≥ ÿ™'];
        var x3 = Math.floor(Math.random()*x.length)
        message.channel.send(`ŸÅŸÉŸÉ ÿßŸÑŸÉŸÑŸÖÿ© ÿßŸÑÿ¢ÿ™Ÿäÿ© :${x[x3]}, ŸÑÿØŸäŸÉ 20 ÿ´ÿßŸÜŸäÿ©`).then(msg1=> {
            var r = message.channel.awaitMessages(msg => msg.content == x2[x3], {
                maxMatches : 1,
                time : 20000,
                errors : ['time']
            })
        r.catch(() => {
            return message.channel.send('‚ùå ŸÑŸÇÿØ ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™ ŸàŸÑŸÖ ŸäŸÇŸÖ ÿ£ÿ≠ÿØ ÿ®ÿßŸÑÿ£ÿ¨ÿßÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠')
                    message.channel.sendEmbed(embed)
        })
        r.then(s=> {
 
        points[message.author.id].points +=1
            message.channel.send(`‚úÖ ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ¨Ÿàÿßÿ® ÿßŸÑÿµÿ≠Ÿäÿ≠ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®
 ‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê**{ŸÜŸÇÿßÿ∑ŸÉ:${points[message.author.id].points }}**‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ`);
               message.channel.sendEmbed(embed)
        })
        })
    }
    fs.writeFile('points.json', JSON.stringify(points), (err) => {
        if (err) console.error(err);
    })
        if (message.content == "+ÿ±ŸÉÿ®") {    
        var x = ['ÿ∂ ŸÅ ÿØ ÿπ', 'ÿ∑ Ÿä ÿß ÿ± ÿ©', 'ÿ± ÿπ Ÿà ÿØ Ÿä', 'ÿ™ ŸÅ ŸÉ Ÿä ŸÉ', 'ÿ™ ÿ¨ ÿ± ÿ® ÿ©', 'ŸÖ ÿØ ÿ± ÿ≥ ÿ©', 'ŸÖ ÿπ ŸÑ ŸÖ', 'ŸÜ ŸÇ ÿß ÿ∑', 'ÿß ŸÉ ÿ≥ Ÿä ŸÅ Ÿà', 'ŸÖ ŸÉ Ÿà Ÿá', 'ÿ± Ÿà ŸÇ ŸÜ'];
        var x2 = ['ÿ∂ŸÅÿØÿπ', 'ÿ∑Ÿäÿßÿ±ÿ©', 'ÿ±ÿπŸàÿØŸä', 'ÿ™ŸÅŸÉŸäŸÉ', 'ÿ™ÿ¨ÿ±ÿ®ÿ©', 'ŸÖÿØÿ±ÿ≥ÿ©', 'ŸÖÿπŸÑŸÖ' , 'ŸÜŸÇÿßÿ∑' , 'ÿßŸÉÿ≥ŸäŸÅŸà' , 'ŸÖŸÉŸàŸá' , 'ŸáŸÉŸàŸÜÿß ŸÖÿ∑ÿßÿ∑ÿß' , 'ÿ±ŸàŸÇŸÜ'];
        var x3 = Math.floor(Math.random()*x.length)
        message.channel.send(`ÿ±ŸÉÿ® ÿßŸÑŸÉŸÑŸÖÿ©  ÿßŸÑÿ¢ÿ™Ÿäÿ© :${x[x3]}, ŸÑÿØŸäŸÉ 20 ÿ´ÿßŸÜŸäÿ©`).then(msg1=> {
            var r = message.channel.awaitMessages(msg => msg.content == x2[x3], {
                maxMatches : 1,
                time : 20000,
                errors : ['time']
            })
        r.catch(() => {
            return message.channel.send('‚ùå ŸÑŸÇÿØ ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™ ŸàŸÑŸÖ ŸäŸÇŸÖ ÿ£ÿ≠ÿØ ÿ®ÿßŸÑÿ£ÿ¨ÿßÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠')
                    message.channel.sendEmbed(embed)
        })
        r.then(s=> {
 
            points[message.author.id].points +=1
            message.channel.send(`‚úÖ ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ¨Ÿàÿßÿ® ÿßŸÑÿµÿ≠Ÿäÿ≠ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®
 ‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê**{ŸÜŸÇÿßÿ∑ŸÉ:${points[message.author.id].points }}**‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ`);
               message.channel.sendEmbed(embed)
        })
        })
    }
    fs.writeFile('points.json', JSON.stringify(points), (err) => {
        if (err) console.error(err);
    })
        if (message.content == "+ÿßÿ≠ÿ≥ÿ®") {    
        var x = ['50√ó50', '1000000√ó1', '89√ó10', '90√ó5', '30√ó3', '10√ó10', '1000√ó1000', '44,5+44,5'];
        var x2 = ['2500', '1000000', '890', '450', '90', '100', '1000000' , '89'];
        var x3 = Math.floor(Math.random()*x.length)
        message.channel.send(`ÿ±ŸÉÿ® ÿßŸÑŸÉŸÑŸÖÿ©  ÿßŸÑÿ¢ÿ™Ÿäÿ© :${x[x3]}, ŸÑÿØŸäŸÉ 20 ÿ´ÿßŸÜŸäÿ©`).then(msg1=> {
            var r = message.channel.awaitMessages(msg => msg.content == x2[x3], {
                maxMatches : 1,
                time : 20000,
                errors : ['time']
            })
        r.catch(() => {
            return message.channel.send('‚ùå ŸÑŸÇÿØ ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™ ŸàŸÑŸÖ ŸäŸÇŸÖ ÿ£ÿ≠ÿØ ÿ®ÿßŸÑÿ£ÿ¨ÿßÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠')
                    message.channel.sendEmbed(embed)
        })
        r.then(s=> {
 
            points[message.author.id].points +=1
            message.channel.send(`‚úÖ ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ¨Ÿàÿßÿ® ÿßŸÑÿµÿ≠Ÿäÿ≠ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®
 ‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê**{ŸÜŸÇÿßÿ∑ŸÉ:${points[message.author.id].points}}**‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ`);
               message.channel.sendEmbed(embed)
        })
        })
    }
    fs.writeFile('points.json', JSON.stringify(points), (err) => {
        if (err) console.error(err);
    })
   
  if (message.content == "+ÿπŸàÿßÿµŸÖ") {
        var x = ['ÿßŸÑŸäŸÖŸÜ', 'ŸÖÿµÿ±', 'ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ±', 'ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©', 'ÿßŸÑÿµŸàŸÖÿßŸÑ', 'ÿßŸÑÿπÿ±ÿßŸÇ' , 'ÿßŸÑÿßŸÖÿßÿ±ÿßÿ™' , 'ÿ≥Ÿàÿ±Ÿäÿß' , 'ÿßŸÑŸÖÿ∫ÿ±ÿ®'];
        var x2 = ['ÿµŸÜÿπÿßÿ°', 'ÿßŸÑŸÇÿßŸáÿ±ÿ©', 'ÿßŸÑÿ¨ÿ≤ÿßÿ¶ÿ±', 'ÿßŸÑÿ±Ÿäÿßÿ∂', 'ÿßŸÑÿÆÿ±ÿ∑ŸàŸÖ', 'ÿ®ÿ∫ÿØÿßÿØ', 'ÿßÿ®Ÿà ÿ∏ÿ®Ÿä','ÿØŸÖÿ¥ŸÇ ','ÿßŸÑÿ± ÿ®ÿßÿ∑'];
        var x3 = Math.floor(Math.random()*x.length)
        message.channel.send(`ŸÖÿßŸáŸä ÿπÿßÿµŸÖÿ© :${x[x3]}, ŸÑÿØŸäŸÉ 15 ÿ´ÿßŸÜŸäÿ©`).then(msg1=> {
            var r = message.channel.awaitMessages(msg => msg.content == x2[x3], {
                maxMatches : 1,
                time : 15000,
                errors : ['time']
            })
        r.catch(() => {
            return message.channel.send('‚ùå ŸÑŸÇÿØ ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™ ŸàŸÑŸÖ ŸäŸÇŸÖ ÿ£ÿ≠ÿØ ÿ®ÿßŸÑÿ£ÿ¨ÿßÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠')
               message.channel.sendEmbed(embed)
        })
        r.then(s=> {
 
            points[message.author.id].points +=1
            message.channel.send(`‚úÖ ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ¨Ÿàÿßÿ® ÿßŸÑÿµÿ≠Ÿäÿ≠ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®
 ‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê**{ŸÜŸÇÿßÿ∑ŸÉ:${points[message.author.id].points}}**‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ`);
               message.channel.sendEmbed(embed)
        })
        })
    }
    fs.writeFile('points.json', JSON.stringify(points), (err) => {
        if (err) console.error(err);
    })
    if (message.content == "+ŸÑÿ∫ÿ≤") {
        var x = ['ŸÉŸÑŸä ÿ´ŸÇŸàÿ® ŸàŸÖÿπ ÿ∞ŸÑŸÉ ÿ£ÿ≠ŸÅÿ∏ ÿßŸÑŸÖÿßÿ° ŸÅŸÖŸÜ ÿ£ŸÉŸàŸÜ ÿü', 'ŸÖÿß ŸáŸà ÿßŸÑÿ¥Ÿäÿ° ÿßŸÑÿ∞Ÿä ŸäŸÖÿ¥Ÿä Ÿà ŸäŸÇŸÅ ŸàŸÑŸäÿ≥ ŸÑŸá ÿ£ÿ±ÿ¨ŸÄŸÑ ÿü', 'ŸÖÿß ŸáŸà ÿßŸÑÿ¥ÿ¶ ÿßŸÑÿ∞Ÿä Ÿäÿ±ŸÅÿπ ÿßÿ´ŸÇÿßŸÑ ŸàŸÑÿß ŸäŸÇÿØÿ± Ÿäÿ±ŸÅÿπ ŸÖÿ≥ŸÖÿßÿ± ÿü', 'Ÿäÿ≥ŸÖÿπ ÿ®ŸÑÿß ÿ£ÿ∞ŸÜ ŸàŸäÿ™ŸÉŸÑŸÖ ÿ®ŸÑÿß ŸÑÿ≥ÿßŸÜ ŸÅŸÖÿß ŸáŸà ÿü', 'ŸÖÿßŸáŸà ÿßŸÑÿ¥Ÿäÿ° ÿßŸÑÿ∞Ÿä ŸäŸÉÿ™ÿ® Ÿà ŸÑÿß ŸäŸÇÿ±ÿ£ ÿü', 'ŸÖÿßŸáŸà ÿßŸÑÿ¥Ÿäÿ° ÿßŸÑÿ∞Ÿä ŸäŸÉŸàŸÜ ÿßÿÆÿ∂ÿ± ŸÅŸä ÿßŸÑÿßÿ±ÿ∂ Ÿàÿßÿ≥ŸàÿØ ŸÅŸä ÿßŸÑÿ≥ŸàŸÇ Ÿàÿßÿ≠ŸÖŸÄŸÄÿ± ŸÅŸä ÿßŸÑÿ®Ÿäÿ™ ÿü', 'ÿπÿßÿ¶ŸÑÿ© ŸÖÿ§ŸÑŸÅÿ© ŸÖŸÜ 6 ÿ®ŸÜÿßÿ™ Ÿàÿ£ÿÆ ŸÑŸÉŸÑ ŸÖŸÜŸáŸÜÿå ŸÅŸÉŸÖ ÿπÿØÿØ ÿ£ŸÅÿ±ÿßÿØ ÿßŸÑÿπÿßÿ¶ŸÑÿ© ÿü', 'Ÿäÿ™ÿ≠ÿ±ŸÉ ÿØÿßÿ¶ŸÖÿßŸã ÿ≠ŸàÿßŸÑŸäŸÉ ŸÑŸÉŸÜŸÉ ŸÑÿßÿ™ÿ±ÿßŸá ŸÅŸÖÿß ŸáŸà ÿü' ,'ŸÖÿß ŸáŸà ÿßŸÑÿ®ŸÑŸäŸàŸÜ ÿü'];
        var x2 = ['ÿßŸÑÿßÿ≥ŸÅŸÜÿ¨', 'ÿßŸÑÿ≥ÿßÿπÿ©', 'ÿßŸÑÿ®ÿ≠ÿ±', 'ÿßŸÑÿ™ŸÑŸÅŸàŸÜ', 'ÿßŸÑÿπŸÖÿ±', 'ÿßŸÑÿ¥ÿßŸä', 'ÿ≥ÿ®ÿπÿ© ÿßÿ¥ÿÆÿßÿµ' ,'ÿßŸÑŸáŸàÿßÿ°' ,'ÿßŸÑŸÅ ŸÖŸÑŸäŸàŸÜ'];
        var x3 = Math.floor(Math.random()*x.length)
        message.channel.send(`ÿ≠ŸÑ ÿßŸÑŸÑÿ∫ÿ≤ ÿßŸÑÿ£ÿ™Ÿä :${x[x3]}, ŸÑÿØŸäŸÉ 20 ÿ´ÿßŸÜŸäÿ©`).then(msg1=> {
            var r = message.channel.awaitMessages(msg => msg.content == x2[x3], {
                maxMatches : 1,
                time : 20000,
                errors : ['time']
            })
        r.catch(() => {
            return message.channel.send('‚ùå ŸÑŸÇÿØ ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™ ŸàŸÑŸÖ ŸäŸÇŸÖ ÿ£ÿ≠ÿØ ÿ®ÿßŸÑÿ£ÿ¨ÿßÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠')
               message.channel.sendEmbed(embed)
        })
        r.then(s=> {
 
            points[message.author.id].points +=1
            message.channel.send(`‚úÖ ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ¨Ÿàÿßÿ® ÿßŸÑÿµÿ≠Ÿäÿ≠ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®
 ‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê**{ŸÜŸÇÿßÿ∑ŸÉ:${points[message.author.id].points}}**‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ`);
               message.channel.sendEmbed(embed)
        })
        })
    }
    fs.writeFile('points.json', JSON.stringify(points), (err) => {
        if (err) console.error(err);
    })
  if (message.content == "+ÿ™ÿ≠ÿØŸä") {    
        var x = ['ŸÅ ÿ∂ ÿπ ÿØ', 'ÿµ ÿ¥ ÿÆ', 'ÿ© ÿØ ÿß ÿ± ÿ¨', 'ÿß ÿ± Ÿä ÿ© ÿ≥', 'Ÿä ÿ™ ÿ®', 'ÿ¶ ÿß ÿπ ŸÑ ÿ©', ' ÿß ÿ¥ Ÿä', 'ŸÜ ÿ≠ Ÿà Ÿä ÿß', 'ÿ≥ ÿØ Ÿà Ÿä ŸÉ ÿ± ÿØ', 'ÿ± ÿ∑ Ÿä ÿß ÿ©' , 'ŸÜ ÿ≠ ÿ≤ ŸÑ Ÿà', 'ŸÉ ÿß ŸÅ Ÿä ÿ≥ Ÿà'];
        var x2 = ['ÿ∂ŸÅÿØÿπ', 'ÿ¥ÿÆÿµ', 'ÿØÿ±ÿßÿ¨ÿ©', 'ÿ≥Ÿäÿßÿ±ÿ©', 'ÿ®Ÿäÿ™', 'ÿπÿßÿ¶ŸÑÿ©', 'ÿ¥ÿßŸä', 'ÿ≠ŸäŸàÿßŸÜ', 'ÿØŸäÿ≥ŸÉŸàÿ±ÿØ', 'ÿ∑Ÿäÿßÿ±ÿ©', 'ÿ≠ŸÑÿ≤ŸàŸÜ', 'ÿßŸÉÿ≥ŸäŸÅŸà'];
        var x3 = Math.floor(Math.random()*x.length)
        message.channel.send(`ÿπÿØŸÑ ÿßŸÑŸÉŸÑŸÖÿ©  ÿßŸÑÿ¢ÿ™Ÿäÿ© :${x[x3]}, ŸÑÿØŸäŸÉ 25 ÿ´ÿßŸÜŸäÿ©`).then(msg1=> {
            var r = message.channel.awaitMessages(msg => msg.content == x2[x3], {
                maxMatches : 1,
                time : 25000,
                errors : ['time']
            })
        r.catch(() => {
            return message.channel.send('‚ùå ŸÑŸÇÿØ ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™ ŸàŸÑŸÖ ŸäŸÇŸÖ ÿ£ÿ≠ÿØ ÿ®ÿßŸÑÿ£ÿ¨ÿßÿ®ÿ© ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠')
                    message.channel.sendEmbed(embed)
        })
        r.then(s=> {
 
            points[message.author.id].points +=1
            message.channel.send(`‚úÖ ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑÿ¨Ÿàÿßÿ® ÿßŸÑÿµÿ≠Ÿäÿ≠ ÿ®ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÜÿßÿ≥ÿ®
 ‚îÄ‚ïê‚ïê‚ïê‚ïê‚ïê**{ŸÜŸÇÿßÿ∑ŸÉ:${points[message.author.id].points}}**‚ïê‚ïê‚ïê‚ïê‚ïê‚îÄ`);
               message.channel.sendEmbed(embed)
        })
        })
    }
    fs.writeFile('points.json', JSON.stringify(points), (err) => {
        if (err) console.error(err);
    })
    });








    client.on("message", message => {
 if (message.content === "+games") {
  const embed = new Discord.RichEmbed()
      .setColor("RANDOM")
      .setDescription(` ‚úß‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Games ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚úß
 
+ŸÇŸÖ ÿ®ÿ™ŸÅŸÉŸäŸÉ ÿßŸÑÿ¨ŸÖŸÑ  ‚ûº ŸÅŸÉŸÉ
 
+ŸÇŸÖ ÿ®ÿ™ÿ±ŸÉŸäÿ® ÿßŸÑÿ¨ŸÖŸÑ  ‚ûº ÿ±ŸÉÿ®
 
+ŸÇŸÖ ÿ®ÿ≠ŸÑ ÿßŸÑŸÖÿ≥ÿßÿ¶ŸÑ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿ©  ‚ûº ÿßÿ≠ÿ≥ÿ®
 
+ŸÇŸÖ ÿ®ÿ£Ÿäÿ¨ÿßÿØ ÿßŸÑÿπŸàÿßÿµŸÖ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ‚ûº ÿπŸàÿßÿµŸÖ
 
+ŸÇŸÖ ÿ®ÿ≠ŸÑ ÿßŸÑÿ£ŸÑÿ∫ÿßÿ≤ ‚ûº ŸÑÿ∫ÿ≤
 
+ŸÇŸÖ ÿ®ÿ™ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ÿ±ŸàŸÅ ‚ûº ÿ™ÿ≠ÿØŸä
 
 +minec -> ŸÑÿπÿ®ÿ© ŸÖÿßŸäŸÜ ŸÉÿ±ŸÅÿ™
 
+ŸÑÿπÿ±ÿ∂ ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ ‚ûº ŸÜŸÇÿßÿ∑Ÿä
 
 ‚úß‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Games ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚úß`)
 .setFooter("By : ! NM| ùïÄùïÄ‚Ñùùîº‚Ñ§ùîºùïè_ùïêùïã#7678 ")
   message.channel.sendEmbed(embed)
   
   }
   });







 client.on('message', async msg => {
    if (msg.author.bot) return undefined;
   
    if (!msg.content.startsWith(prefix)) return undefined;
    const args = msg.content.split(' ');
    const searchString = args.slice(1).join(' ');
   
    const url = args[1] ? args[1].replace(/<(.+)>/g, '$1') : '';
    const serverQueue = queue.get(msg.guild.id);
 
    let command = msg.content.toLowerCase().split(" ")[0];
    command = command.slice(prefix.length)
 
    if (command === `play`) {
        const voiceChannel = msg.member.voiceChannel;
        if (!voiceChannel) return msg.channel.send('Ÿäÿ¨ÿ® ÿ™Ÿàÿ¢ÿ¨ÿØ ÿ≠ÿ∂ÿ±ÿ™ŸÉ ÿ®ÿ±ŸàŸÖ ÿµŸàÿ™Ÿä .');
        const permissions = voiceChannel.permissionsFor(msg.client.user);
        if (!permissions.has('CONNECT')) {
           
            return msg.channel.send('ŸÑÿß Ÿäÿ™Ÿàÿ¢ÿ¨ÿØ ŸÑÿØŸä ÿµŸÑÿßÿ≠Ÿäÿ© ŸÑŸÑÿ™ŸÉŸÑŸÖ ÿ®Ÿáÿ∞ÿ¢ ÿßŸÑÿ±ŸàŸÖ');
        }
        if (!permissions.has('SPEAK')) {
            return msg.channel.send('ŸÑÿß Ÿäÿ™Ÿàÿ¢ÿ¨ÿØ ŸÑÿØŸä ÿµŸÑÿßÿ≠Ÿäÿ© ŸÑŸÑÿ™ŸÉŸÑŸÖ ÿ®Ÿáÿ∞ÿ¢ ÿßŸÑÿ±ŸàŸÖ');
        }
 
        if (!permissions.has('EMBED_LINKS')) {
            return msg.channel.sendMessage("**Ÿäÿ¨ÿ® ÿ™Ÿàÿ¢ŸÅÿ± ÿ®ÿ±ŸÖÿ¥ŸÜ `EMBED LINKS`ŸÑÿØŸä **")
        }
 
        if (url.match(/^https?:\/\/(www.youtube.com|youtube.com)\/playlist(.*)$/)) {
            const playlist = await youtube.getPlaylist(url);
            const videos = await playlist.getVideos();
           
            for (const video of Object.values(videos)) {
                const video2 = await youtube.getVideoByID(video.id); // eslint-disable-line no-await-in-loop
                await handleVideo(video2, msg, voiceChannel, true); // eslint-disable-line no-await-in-loop
            }
            return msg.channel.send(` **${playlist.title}** ÿ™ŸÖ ÿßŸÑÿ•ÿ∂ÿ¢ŸÅÿ© ÿ•ŸÑŸâ ŸÇÿ£ÿ¶ŸÖÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ`);
        } else {
            try {
 
                var video = await youtube.getVideo(url);
            } catch (error) {
                try {
                    var videos = await youtube.searchVideos(searchString, 5);
                    let index = 0;
                    const embed1 = new Discord.RichEmbed()
                    .setDescription(`**ÿßŸÑÿ±ÿ¨ÿ¢ÿ° ŸÖŸÜ ÿ≠ÿ∂ÿ±ÿ™ŸÉ ÿ•ÿÆÿ™Ÿäÿ¢ÿ± ÿ±ŸÇŸÖ ÿßŸÑŸÖŸÇÿ∑ÿπ** :
${videos.map(video2 => `[**${++index} **] \`${video2.title}\``).join('\n')}`)
 
                    .setFooter("By ! ‚ôØ ,RaaXe ‚ô™ ,üåπüíî#1008")
                    msg.channel.sendEmbed(embed1).then(message =>{message.delete(20000)})
                   
                    // eslint-disable-next-line max-depth
                    try {
                        var response = await msg.channel.awaitMessages(msg2 => msg2.content > 0 && msg2.content < 11, {
                            maxMatches: 1,
                            time: 15000,
                            errors: ['time']
                        });
                    } catch (err) {
                        console.error(err);
                        return msg.channel.send('ŸÑŸÖ Ÿäÿ™ŸÖ ÿ•ÿÆÿ™Ÿäÿ¢ÿ± ŸÖŸÇÿ∑ÿπ ÿµŸàÿ™Ÿä');
                    }
                    const videoIndex = parseInt(response.first().content);
                    var video = await youtube.getVideoByID(videos[videoIndex - 1].id);
                } catch (err) {
                    console.error(err);
                    return msg.channel.send(':X: ŸÑÿß Ÿäÿ™ŸàŸÅÿ± ŸÜÿ™ÿ¢ÿ¶ÿ¨ ÿ®ÿ≠ÿ´ ');
                }
            }
 
            return handleVideo(video, msg, voiceChannel);
        }
    } else if (command === `skip`) {
        if (!msg.member.voiceChannel) return msg.channel.send('ÿ£ŸÜÿ™ ŸÑÿ≥ÿ™ ÿ®ÿ±ŸàŸÖ ÿµŸàÿ™Ÿä .');
        if (!serverQueue) return msg.channel.send('ŸÑÿß Ÿäÿ™ŸàŸÅÿ± ŸÖŸÇÿ∑ÿπ ŸÑÿ™ÿ¨ÿ¢Ÿàÿ≤Ÿá');
        serverQueue.connection.dispatcher.end('ÿ™ŸÖ ÿ™ÿ¨ÿ¢Ÿàÿ≤ Ÿáÿ∞ÿ¢ ÿßŸÑŸÖŸÇÿ∑ÿπ');
        return undefined;
    } else if (command === `leave`) {
        if (!msg.member.voiceChannel) return msg.channel.send('ÿ£ŸÜÿ™ ŸÑÿ≥ÿ™ ÿ®ÿ±ŸàŸÖ ÿµŸàÿ™Ÿä .');
        if (!serverQueue) return msg.channel.send('ŸÑÿß Ÿäÿ™ŸàŸÅÿ± ŸÖŸÇÿ∑ÿπ ŸÑÿ•ŸäŸÇÿ¢ŸÅŸá');
        serverQueue.songs = [];
        serverQueue.connection.dispatcher.end('ÿ™ŸÖ ÿ•ŸäŸÇÿ¢ŸÅ Ÿáÿ∞ÿ¢ ÿßŸÑŸÖŸÇÿ∑ÿπ');
        return undefined;
    } else if (command === `vol`) {
        if (!msg.member.voiceChannel) return msg.channel.send('ÿ£ŸÜÿ™ ŸÑÿ≥ÿ™ ÿ®ÿ±ŸàŸÖ ÿµŸàÿ™Ÿä .');
        if (!serverQueue) return msg.channel.send('ŸÑÿß ŸäŸàÿ¨ÿØ ÿ¥Ÿäÿ° ÿ¥ÿ∫ÿ¢ŸÑ.');
        if (!args[1]) return msg.channel.send(`:loud_sound: ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿµŸàÿ™ **${serverQueue.volume}**`);
        serverQueue.volume = args[1];
        serverQueue.connection.dispatcher.setVolumeLogarithmic(args[1] / 50);
        return msg.channel.send(`:speaker: ÿ™ŸÖ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿµŸàÿ™ ÿßŸÑŸä **${args[1]}**`);
    } else if (command === `np`) {
        if (!serverQueue) return msg.channel.send('ŸÑÿß ŸäŸàÿ¨ÿØ ÿ¥Ÿäÿ° ÿ≠ÿßŸÑŸä ŸÅ ÿßŸÑÿπŸÖŸÑ.');
        const embedNP = new Discord.RichEmbed()
    .setDescription(`:notes: ÿßŸÑÿßŸÜ Ÿäÿ™ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ : **${serverQueue.songs[0].title}**`)
        return msg.channel.sendEmbed(embedNP);
    } else if (command === `queue`) {
       
        if (!serverQueue) return msg.channel.send('ŸÑÿß ŸäŸàÿ¨ÿØ ÿ¥Ÿäÿ° ÿ≠ÿßŸÑŸä ŸÅ ÿßŸÑÿπŸÖŸÑ.');
        let index = 0;
       
        const embedqu = new Discord.RichEmbed()
 
.setDescription(`**Songs Queue**
${serverQueue.songs.map(song => `**${++index} -** ${song.title}`).join('\n')}
**ÿßŸÑÿßŸÜ Ÿäÿ™ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ** ${serverQueue.songs[0].title}`)
        return msg.channel.sendEmbed(embedqu);
    } else if (command === `stop`) {
        if (serverQueue && serverQueue.playing) {
            serverQueue.playing = false;
            serverQueue.connection.dispatcher.pause();
            return msg.channel.send('ÿ™ŸÖ ÿ•ŸäŸÇÿßŸÅ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ŸÖÿ§ŸÇÿ™ÿß!');
        }
        return msg.channel.send('ŸÑÿß ŸäŸàÿ¨ÿØ ÿ¥Ÿäÿ° ÿ≠ÿßŸÑŸä ŸÅ ÿßŸÑÿπŸÖŸÑ.');
    } else if (command === "resume") {
        if (serverQueue && !serverQueue.playing) {
            serverQueue.playing = true;
            serverQueue.connection.dispatcher.resume();
            return msg.channel.send('ÿßÿ≥ÿ™ÿ£ŸÜŸÅÿ™ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ÿ®ÿßŸÑŸÜÿ≥ÿ®ÿ© ŸÑŸÉ !');
        }
        return msg.channel.send('ŸÑÿß ŸäŸàÿ¨ÿØ ÿ¥Ÿäÿ° ÿ≠ÿßŸÑŸä ŸÅŸä ÿßŸÑÿπŸÖŸÑ.');
    }
 
    return undefined;
});
async function handleVideo(video, msg, voiceChannel, playlist = false) {
    const serverQueue = queue.get(msg.guild.id);
    console.log(video);
   
 
    const song = {
        id: video.id,
        title: Util.escapeMarkdown(video.title),
        url: `https://www.youtube.com/watch?v=${video.id}`
    };
    if (!serverQueue) {
        const queueConstruct = {
            textChannel: msg.channel,
            voiceChannel: voiceChannel,
            connection: null,
            songs: [],
            volume: 5,
            playing: true
        };
        queue.set(msg.guild.id, queueConstruct);
 
        queueConstruct.songs.push(song);
 
        try {
            var connection = await voiceChannel.join();
            queueConstruct.connection = connection;
            play(msg.guild, queueConstruct.songs[0]);
        } catch (error) {
            console.error(`I could not join the voice channel: ${error}`);
            queue.delete(msg.guild.id);
            return msg.channel.send(`ŸÑÿß ÿ£ÿ≥ÿ™ÿ∑Ÿäÿπ ÿØÿÆŸàŸÑ Ÿáÿ∞ÿ¢ ÿßŸÑÿ±ŸàŸÖ ${error}`);
        }
    } else {
        serverQueue.songs.push(song);
        console.log(serverQueue.songs);
        if (playlist) return undefined;
        else return msg.channel.send(` **${song.title}** ÿ™ŸÖ ÿßÿ∂ÿßŸÅŸá ÿßŸÑÿßÿ∫ŸÜŸäÿ© ÿßŸÑŸä ÿßŸÑŸÇÿßÿ¶ŸÖÿ©!`);
    }
    return undefined;
}
 
function play(guild, song) {
    const serverQueue = queue.get(guild.id);
 
    if (!song) {
        serverQueue.voiceChannel.leave();
        queue.delete(guild.id);
        return;
    }
    console.log(serverQueue.songs);
 
    const dispatcher = serverQueue.connection.playStream(ytdl(song.url))
        .on('end', reason => {
            if (reason === 'Stream is not generating quickly enough.') console.log('Song ended.');
            else console.log(reason);
            serverQueue.songs.shift();
            play(guild, serverQueue.songs[0]);
        })
        .on('error', error => console.error(error));
    dispatcher.setVolumeLogarithmic(serverQueue.volume / 5);
 
    serverQueue.textChannel.send(`ÿ®ÿØÿ° ÿ™ÿ¥ÿ∫ŸäŸÑ : **${song.title}**`);
}
 
const adminprefix = "$vip";
const devs = ['274923685985386496'];
client.on('message', message => {
  var argresult = message.content.split(` `).slice(1).join(' ');
    if (!devs.includes(message.author.id)) return;
   
if (message.content.startsWith(adminprefix + 'setgdame')) {
  client.user.setGame(argresult);
    message.channel.sendMessage(`**${argresult} ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ÿ®ŸÑÿßŸäŸÜŸÇ ÿßŸÑÿ®Ÿàÿ™ ÿ•ŸÑŸâ **`)
} else
  if (message.content.startsWith(adminprefix + 'setname')) {
client.user.setUsername(argresult).then
    message.channel.sendMessage(`**${argresult}** : ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ÿ£ÿ≥ŸÖ ÿßŸÑÿ®Ÿàÿ™ ÿ•ŸÑŸâ`)
return message.reply("**ŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿßÿ≥ŸÖ Ÿäÿ¨ÿ® ÿπŸÑŸäŸÉ ÿßŸÑÿßŸÜÿ™ÿ∏ÿ¢ÿ± ŸÑŸÖÿØÿ© ÿ≥ÿßÿπÿ™ŸäŸÜ . **");
} else
  if (message.content.startsWith(adminprefix + 'setavatar')) {
client.user.setAvatar(argresult);
  message.channel.sendMessage(`**${argresult}** : ÿ™ŸÖ ÿ™ÿ∫Ÿäÿ± ÿµŸàÿ±ÿ© ÿßŸÑÿ®Ÿàÿ™`);
      } else    
if (message.content.startsWith(adminprefix + 'setT')) {
  client.user.setGame(argresult, "https://www.twitch.tv/idk");
    message.channel.sendMessage(`**ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ÿ™ŸàŸäÿ™ÿ¥ ÿßŸÑÿ®Ÿàÿ™ ÿ•ŸÑŸâ  ${argresult}**`)
}
  });  







client.on("message", message => {
 if (message.content === "+music") {
  const embed = new Discord.RichEmbed()
      .setColor("RANDOM")
      .setDescription(` ‚úß‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ music command ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚úß
${prefix}play ‚áè ŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿ£ÿ∫ŸÜŸäÿ© ÿ®ÿ±ÿ¢ÿ®ÿ∑ ÿ£Ÿà ÿ®ÿ£ÿ≥ŸÖ
 
${prefix}skip ‚áè ŸÑÿ™ÿ¨ÿ¢Ÿàÿ≤ ÿßŸÑÿ£ÿ∫ŸÜŸäÿ© ÿßŸÑÿ≠ÿ¢ŸÑŸäÿ©
 
${prefix}stop ‚áè ÿ•ŸäŸÇÿ¢ŸÅ ÿßŸÑÿ£ÿ∫ŸÜŸäÿ© ŸÖÿ§ŸÇÿ™ÿß
 
${prefix}resume ‚áè ŸÑŸÖŸàÿ¢ÿµŸÑÿ© ÿßŸÑÿ•ÿ∫ŸÜŸäÿ© ÿ®ÿπÿØ ÿ•ŸäŸÇÿ¢ŸÅŸáÿ¢ ŸÖÿ§ŸÇÿ™ÿß
 
${prefix}vol ‚áè ŸÑÿ™ÿ∫ŸäŸäÿ± ÿØÿ±ÿ¨ÿ© ÿßŸÑÿµŸàÿ™ 100 - 0
 
${prefix}leave‚áè ŸÑÿ•ÿÆÿ±ÿ¢ÿ¨ ÿßŸÑÿ®Ÿàÿ™ ŸÖŸÜ ÿßŸÑÿ±ŸàŸÖ
 
${prefix}np ‚áè ŸÑŸÖÿπÿ±ŸÅÿ© ÿßŸÑÿ£ÿ∫ŸÜŸäÿ© ÿßŸÑŸÖÿ¥ÿ∫ŸÑÿ© ÿ≠ÿ¢ŸÑŸäÿß
 
${prefix}queue ‚áè ŸÑŸÖÿπÿ±ŸÅÿ© ŸÇÿ¢ÿ¶ŸÖÿ© ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
 
 ‚úß‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ music command ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚úß`)
 .setFooter("By : ! NM| ùïÄùïÄ‚Ñùùîº‚Ñ§ùîºùïè_ùïêùïã#7678 ")
   message.channel.sendEmbed(embed)
 }
  });
   




  client.on("message", message => {
 if (message.content === "+admin") {
  const embed = new Discord.RichEmbed()
      .setColor("RANDOM")
      .setDescription(` ‚úß‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Admin command ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚úß
--------------------------
+clear | to clear chat
--------------------------
+info | to see server info
--------------------------
+bc <message> | to bordecast all
--------------------------
+send | in channel vote
--------------------------
+setvoice | voice online
--------------------------
+mute | to muted
--------------------------
+unmutevoice | to unmutevoice
--------------------------
+deafen | to deafen
--------------------------
+undeafen | to undeafen
--------------------------
+unban | to unban
--------------------------
+server | to see server info 2X
--------------------------
+bans | to see all bannd
--------------------------
+mutechat | to mute chat
--------------------------
+unchat | to unmute chat
--------------------------
+move | to move member
--------------------------
+kick | to kicked members
--------------------------
+count | to see members in the server
--------------------------
+bot | to see bot info
--------------------------
+hchn | to invzblty channels
--------------------------
+schn | to uninvzblty channels
--------------------------
+temp on | to create tempera channel
--------------------------
+temp off | to closed tempra channel
 ‚úß‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Admin command ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚úß`)
 .setFooter("By : ! NM| ùïÄùïÄ‚Ñùùîº‚Ñ§ùîºùïè_ùïêùïã#7678 ")
   message.channel.sendEmbed(embed)
 }
 });






     client.on("message", message => {
 if (message.content === "+member") {
  const embed = new Discord.RichEmbed()
      .setColor("RANDOM")
      .setDescription(` ‚úß‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Member command ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚úß
 
+credit | to see your credit
--------------------------
+daily | to get your daily
--------------------------
+ping | to see your ping
--------------------------
+avatar | to see your avatar
--------------------------
+id | to see your id
--------------------------
+tag | to see your tag
--------------------------
+new  | to create ticket
-------------------------
ÿ±ÿßÿ®ÿ∑ | Ÿäÿπÿ∑ŸäŸÉ ÿ±ÿßÿ®ÿ∑ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±
-------------------------
+data | to see you data
-------------------------
+w <location> | to see your weather
-------------------------
+ŸÅÿπŸÑŸÜŸä | to avtive you
-------------------------
+mcskin <name> | ŸÑŸÖÿπÿ±ŸÅÿ© ÿ≥ŸÉŸÜŸÉ ŸÅŸä ŸÖÿßŸäŸÜ ŸÉÿ±ŸÅÿ™
-------------------------
+minec | ŸÑÿπÿ®ÿ© ŸÖÿßŸäŸÜ ŸÉÿ±ŸÅÿ™
-------------------------
+invites |  ŸÑŸÖÿπÿ±ŸÅÿ© ŸÉŸÖ ÿ¥ÿÆÿµ ÿ¨ÿ®ÿ™ ŸÑŸÑÿ≥Ÿäÿ±ŸÅÿ±
 ‚úß‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ Member command ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚úß`)
 .setFooter("By : ! NM| ùïÄùïÄ‚Ñùùîº‚Ñ§ùîºùïè_ùïêùïã#7678 ")
   message.channel.sendEmbed(embed)
 }
 });






client.on('message' , function (message){
      var token = 'NTA3NjIxNTcwNDIwODAxNTM3.Dr3h_A.rm9PBgErj9sewmvy308qT9ixip4'; // ÿßŸÑÿ™ŸàŸÉŸÜ ŸáŸÜÿß ÿ®ÿ≥
      if(message.content === '+restart') {
if(message.author.id !== '288240894979604491') return message.reply('ÿßŸÑÿßŸÖÿ± ÿÆÿßÿµ ÿ®ŸÄ ÿµÿßÿ≠ÿ® ÿßŸÑÿ®Ÿàÿ™ Ÿàÿ¥ŸÉÿ±ÿß');
          client.destroy();
          client.login(token) // ŸÑÿß ÿ™ÿ∫Ÿäÿ±Ÿáÿß
var time = 7200000;
client.setInterval(function() {
    client.destroy();
    client.login(token) // ŸÑÿß ÿ™ÿ∫Ÿäÿ±Ÿáÿß
  }, time);
}
}
          
          
          
          

          
client.on("message", message => {
    var prefix = "+"
    if (!message.content.startsWith(prefix)) return;
      let command = message.content.split(" ")[0];
      command = command.slice(prefix.length);
        if(command === "mcskin") {
                const args = message.content.split(" ").slice(1).join(" ")
        if (!args) return message.channel.send("** Type your skin name **");
        const image = new Discord.Attachment(`https://minotar.net/armor/body/${args}`, "skin.png");
    message.channel.send(image)
        }
    });






client.on("message", async message => {
            if(!message.channel.guild) return;
            var prefix = "+";
        if(message.content.startsWith(prefix + 'invites')) {
        var nul = 0
        var guild = message.guild
        await guild.fetchInvites()
            .then(invites => {
             invites.forEach(invite => {
                if (invite.inviter === message.author) {
                     nul+=invite.uses
                    }
                });
            });
          if (nul > 0) {
              console.log(`\n${message.author.tag} has ${nul} invites in ${guild.name}\n`)
              var embed = new Discord.RichEmbed()
                  .setColor("#000000")
                    .addField(`${message.author.username}`, `ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ÿØÿπŸàÿ© **${nul}** ÿ¥ÿÆÿµ`)
                          message.channel.send({ embed: embed });
                      return;
                    } else {
                       var embed = new Discord.RichEmbed()
                        .setColor("#000000")
                        .addField(`${message.author.username}`, `ŸÑŸÖ ÿ™ŸÇŸÖ ÿ®ÿØÿπŸàÿ© ÿ£Ÿä ÿ¥ÿÆÿµ ŸÑŸáÿ∞ÿ© ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±`)
 
                       message.channel.send({ embed: embed });
                        return;
                    }
        }
        if(message.content.startsWith(prefix + 'invite-codes')) {
let guild = message.guild
var codes = [""]
message.channel.send(":postbox: **ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ÿ£ÿ±ÿ≥ÿßŸÑ ÿ¨ŸÖŸäÿπ ÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑÿØÿπŸàÿßÿ™ ÿßŸÑÿ™Ÿä ŸÇŸÖÿ™ ÿ®ÿ£ŸÜÿ¥ÿßÿ¶Ÿáÿß ŸÅŸä ÿßŸÑÿÆÿßÿµ**")
guild.fetchInvites()
.then(invites => {
invites.forEach(invite => {
if (invite.inviter === message.author) {
codes.push(`discord.gg/${invite.code}`)
}
})
}).then(m => {
if (codes.length < 0) {
    var embed = new Discord.RichEmbed()
.setColor("#000000")
.addField(`Your invite codes in ${message.guild.name}`, `You currently don't have any active invites! Please create an invite and start inviting, then you will be able to see your codes here!`)
message.author.send({ embed: embed });
return;
} else {
    var embed = new Discord.RichEmbed()
.setColor("#000000")
.addField(`Your invite codes in ${message.guild.name}`, `Invite Codes:\n${codes.join("\n")}`)
message.author.send({ embed: embed });
return;
}
})
}
 
});






const temp = {};
client.on('message', async message => {
 if(message.channel.type === "dm") return;
  if(message.author.bot) return;
   if(!temp[message.guild.id]) temp[message.guild.id] = {
    time: "3000",
     category : 'click here',
      channel : 'click here'
       }
        if(message.content.startsWith('+temp on')){
         if(!message.member.hasPermission(`MANAGE_GUILD`)) return;
          var ggg= message.guild.createChannel('click here', 'category').then(cg => {
           var ccc =message.guild.createChannel('click here', 'voice').then(ch => {
            ch.setParent(cg)
             message.channel.send('**Done || Temporary Rooms Has Been Activated . :ballot_box_with_check: **')
              client.on('message' , message => {
               if(message.content === '+temp off') {
                if(!message.member.hasPermission(`MANAGE_GUILD`)) return;
                 cg.delete()
                  ch.delete()
                   message.channel.send('**Done || Closed . :ballot_box_with_check:**  ')
                    }
                     });
                      const time = temp[message.guild.id].time
                       client.on('message' , message => {
                        if (message.content.startsWith(prefix + "fgfdkjfdhfgdjghdhghj")) {
                         if(!message.member.hasPermission(`MANAGE_GUILD`)) return;
                          let newTime= message.content.split(' ').slice(1).join(" ")
                          if(!newTime) return message.reply(`**${prefix}temptime <time>  \`1000 = 1s\`**`)
                     if(isNaN(newTime)) return message.reply(`** The Time Be Nambers :face_palm: **`);
                    if(newTime < 1) return message.reply(`**The Time Be Up \`3000s\`**`)
                       temp[message.guild.id].time = newTime
                      message.channel.send(`**Temp Rooms Time Change To \`${newTime}\`**`);
                     }
                    });
                   client.on('voiceStateUpdate', (old, neww) => {
                  let newUserChannel = neww.voiceChannel
                 let oldUserChannel = old.voiceChannel
                temp[message.guild.id].category = cg.id
               temp[message.guild.id].channel = ch.id
              let channel = temp[message.guild.id].channel
             let category = temp[message.guild.id].category
            if(oldUserChannel === undefined && newUserChannel !== undefined && newUserChannel.id == channel) {
           neww.guild.createChannel(neww.displayName , 'voice').then(c => {
          c.setParent(category)
         let scan = setTimeout(()=>{
        if(!neww.voiceChannel) {
       c.delete();
      client.channels.get(channel).overwritePermissions(neww, {
     CONNECT:true,
    SPEAK:true
   })
  }
 }, temp[neww.guild.id].time);
  c.overwritePermissions(neww, {
   CONNECT:true,
    SPEAK:true,
     MANAGE_CHANNEL:true,
      MUTE_MEMBERS:true,
       DEAFEN_MEMBERS:true,
    MOVE_MEMBERS:true,
     VIEW_CHANNEL:true
      })
       neww.setVoiceChannel(c)
            })
             client.channels.get(channel).overwritePermissions(neww, {
          CONNECT:false,
           SPEAK:false
        })
               }
              })
             })
           })
          }
      });





client.login(process.env.BOT_TOKEN);
